image: 
  repository: 9mine/9mine-azure-cloud-fs
  tag: "main"
  pullPolicy: Always

initContainerImage:
  repository: 9mine/execfuse-jinja2
  tag: "master"
  pullPolicy: Always

securityContext: 
  privileged: true
  capabilities:
    add:
      - SYS_ADMIN

service:
  type: ClusterIP
  port: 3900
  
ClusterIPRange:
    from: 3901
    to: 3920

description: "azurecloudfs"

fs: |
    {% include './common.j2' %}
    fs:
      # root
      "/":
        <<: *is_dir
        readdir: 
          sh: ls /accounts
          # /<id>
        "/[0-9]+":
          <<: *is_dir
          name: id
          readdir: 
            list: 
            - vm
          # /<id>/.console.lua
          "/.console.lua":
            <<: *is_file
            read_file: 
              sh: |
                cat <<EOF
                   
                   class "azure_cmdchan"("cmdchan")

                   function azure_cmdchan:azure_cmdchan(connection, cmdchan_path)
                       self.connection = connection
                       self.cmdchan_path = cmdchan_path
                   end

                   function azure_cmdchan:write(command)
                       local conn = self.connection.conn
                       local f = conn:newfid()
                       print("Write " .. command .. " to " .. self.cmdchan_path)
                       conn:walk(conn.rootfid, f, self.cmdchan_path)
                       conn:open(f, 1)
                       local buf = data.new(command)
                       conn:write(f, 0, buf)
                       conn:clunk(f)
                   end

                   function azure_cmdchan:execute(command, location)
                       local tmp_file = "/n/cmdchan/cmdchan_output"
                       pcall(azure_cmdchan.write, self, command, location)
                       return select(2, pcall(azure_cmdchan.read, self, tmp_file))
                   end


                   connection:set_cmdchan(azure_cmdchan(connection, core_conf:get("cmdchan_path")))
                   local tx_name = "9mine-azure-cloud-console.png"
                   texture.download("https://download.logo.wine/logo/Microsoft_Azure/Microsoft_Azure-Logo.wine.png",
                       true, tx_name, "9mine-azure-cloud-fs")
                   entity:set_properties({
                       visual = "cube",
                       textures = {tx_name, tx_name, tx_name, tx_name, tx_name, tx_name}
                   })
                   entity:get_luaentity().on_punch = function(self, player)
                       local p = self.object:get_pos()
                       local pos = minetest.serialize(p)
                       local request = ""
                       minetest.show_formspec(player:get_player_name(), "azure:console",
                           table.concat({"formspec_version[4]", "size[13,13,false]",
                                         "textarea[0.5,0.5;12.0,10;;;" .. minetest.formspec_escape(self.output) .. "]",
                                         "field[0.5,10.5;12,1;input;;]", "field_close_on_enter[input;false]",
                                         "button[10,11.6;2.5,0.9;send;send]",
                                         "field[13,13;0,0;entity_pos;;" .. minetest.formspec_escape(pos) .. "]"}, ""))
                   end

                   local function azure_console(player, formname, fields)
                       if formname == "azure:console" then
                           if not (fields.key_enter or fields.send) then
                               return
                           end
                           local player_name = player:get_player_name()
                           local pos = minetest.deserialize(fields.entity_pos)
                           local lua_entity = select(2, next(minetest.get_objects_inside_radius(pos, 0.5))):get_luaentity()
                           local cmdchan = connections:get_connection(player_name, lua_entity.addr):get_cmdchan()
                           cmdchan:write(fields.input:gsub("^az ", ""))
                           minetest.show_formspec(player_name, "azure:console",
                               table.concat({"formspec_version[4]", "size[13,13,false]", "textarea[0.5,0.5;12.0,10;;;",
                                             minetest.formspec_escape("Please, wait for response"), "]", "field[0.5,10.5;12,1;input;;]",
                                             "field_close_on_enter[input;false]"}, ""))
                           minetest.after(3, function()
                               local function show_output()
                                   local result, response = pcall(cmdchan.read, cmdchan, "/n/cmdchan/cmdchan_output")
                                   if not result then
                                       minetest.after(3, show_output)
                                       return
                                   end
                                   lua_entity.output = fields.input .. ": \n" .. response .. "\n" .. lua_entity.output
                                   minetest.show_formspec(player_name, "azure:console",
                                       table.concat({"formspec_version[4]", "size[13,13,false]", "textarea[0.5,0.5;12.0,10;;;",
                                                     minetest.formspec_escape(lua_entity.output), "]", "field[0.5,10.5;12,1;input;;]",
                                                     "field_close_on_enter[input;false]", "button[10,11.6;2.5,0.9;send;send]",
                                                     "field[13,13;0,0;entity_pos;;", minetest.formspec_escape(fields.entity_pos), "]"}, ""))
                               end
                               show_output()
                           end)
                       end
                   end

                   register.add_form_handler("azure:console", azure_console)
           
                EOF

          # /<id>/.init.lua
          "/.init.lua":
            <<: *is_file
            read_file: 
              sh: |
                cat <<EOF
                   local function set_texture(entry, entity)
                       local prefix = init_path:match("/$") and init_path:sub(1, -2) or init_path
                       if not prefix then
                           return
                       end
                       local azure_textures_directory = "9mine-azure-cloud-fs"
                       local texture_prefix = "9mine-azure-cloud-fs"
                       if entry.entry_string == prefix .. "/vm" then
                           local tx_name = texture_prefix .. "-vm.png"
                           texture.download(
                               "https://www.clipartmax.com/png/middle/18-189604_microsoft-azure-icon-logo-vector-microsoft-azure-logo-vector.png",
                               true, tx_name, azure_textures_directory)
                           entity:set_properties({
                               visual = "sprite",
                               textures = {tx_name}
                           })
                       end

                       if entry.entry_string == prefix .. "/vm/list" then
                           local tx_name = texture_prefix .. "-vm-list.png"
                           texture.download("https://theautomationguy.files.wordpress.com/2019/08/img_1342.png?w=641&h=619&crop=1", true,
                               tx_name, azure_textures_directory)
                           entity:set_properties({
                               visual = "sprite",
                               textures = {tx_name}
                           })
                       end

                       if entry.platform_string == prefix .. "/vm/list" then
                           local tx_name = texture_prefix .. "-vm-instance.png"
                           texture.download(
                               "https://www.pikpng.com/pngl/m/230-2302946_azure-service-fabric-icon-png-download-azure-virtual.png", true,
                               tx_name, azure_textures_directory)
                           entity:set_properties({
                               visual = "sprite",
                               textures = {tx_name}
                           })
                       end

                       if entry.platform_string:match(string.gsub(prefix .. "/vm/list", "%-", "%%%-") .. "/[%d%a%p]+") then
                           local tx_name = texture_prefix .. "-vm-conf.png"
                           texture.download("https://static.thenounproject.com/png/1274728-200.png", true, tx_name,
                               azure_textures_directory)
                           entity:set_properties({
                               visual = "sprite",
                               textures = {tx_name}
                           })
                       end
                   end

                   register.add_texture_handler(init_path .. "9mine-azure-cloud-fs", set_texture)

                   class "azure_cmdchan"("cmdchan")

                   function azure_cmdchan:azure_cmdchan(connection, cmdchan_path)
                       self.connection = connection
                       self.cmdchan_path = cmdchan_path
                   end

                   function azure_cmdchan:write(command)
                       local conn = self.connection.conn
                       local f = conn:newfid()
                       print("Write " .. command .. " to " .. self.cmdchan_path)
                       conn:walk(conn.rootfid, f, self.cmdchan_path)
                       conn:open(f, 1)
                       local buf = data.new(command)
                       conn:write(f, 0, buf)
                       conn:clunk(f)
                   end

                   function azure_cmdchan:execute(command, location)
                       local tmp_file = "/n/cmdchan/cmdchan_output"
                       pcall(azure_cmdchan.write, self, command, location)
                       return select(2, pcall(azure_cmdchan.read, self, tmp_file))
                   end

                   platform.cmdchan = azure_cmdchan(platform.connection, core_conf:get("cmdchan_path"))

                   local function azure_message_handler(player_name, message)
                       if message:match("^az ") then
                           local player = minetest.get_player_by_name(player_name)
                           local player_graph = graphs:get_player_graph(player_name)
                           local platform = player_graph:get_platform(common.get_platform_string(player))
                           if not platform then
                               return false
                           end
                           local cmdchan = platform:get_cmdchan()
                           if not cmdchan then
                               return
                           end
                           message = message:gsub("^az ", "")

                           cmdchan:write(message)
                           minetest.chat_send_player(player_name, "Please, wait for response . . . ")
                           minetest.after(2, function()
                               local function read_response()
                                   local result, response = pcall(cmdchan.read, cmdchan, "/n/cmdchan/cmdchan_output")
                                   if not result then
                                       minetest.after(2, read_response)
                                       return
                                   end
                                   minetest.chat_send_player(player_name, message .. "\n" .. response .. "\n")
                                   cmdchan.show_response(response, player_name)
                               end
                               read_response()
                           end)
                           return true
                       end
                   end

                   register.add_message_handler(init_path .. "azure_message_handler", azure_message_handler)
           
                EOF
          "/n":
            <<: *is_dir
            "/cmdchan":
              <<: *is_dir
              "/cmdchan_output":
                getattr: 
                  sh: (ls /accounts/$id/output >> /dev/null 2>&1 && echo 'ino=1 mode=-rwxr-xr-x nlink=1 uid=0 gid=0 rdev=0 size=0 blksize=512 blocks=2 atime=0 mtime=0 ctime=0 ')
                read_file:
                  sh: cat /accounts/$id/output
              "/chan":
                <<: *is_dir
                "/cmd":
                  <<: *is_file
                  write_file:
                    sh: |
                        str=`cat $CACHE_FILE_NAME`
                        rm -f /accounts/$id/output
                        eval "export AZURE_CONFIG_DIR=/accounts/$id/credentials && az $str" > /accounts/$id/out 2>&1
                        cp /accounts/$id/out /accounts/$id/output

          # /<id>/vm
          "/vm":
            <<: *is_dir
            readdir:
              list: 
              - list
              # /<id>/vm/list
            "/list":
              <<: *is_dir
              cache: 360
              readdir:
                sh: export AZURE_CONFIG_DIR=/accounts/$id/credentials && az vm list | jq -r '.[].name'
              # /<id>/vm/list/<instance>
              "/[a-z0-9_-]+":
                <<: *is_dir
                name: instancename
                readdir: 
                  sh: export AZURE_CONFIG_DIR=/accounts/$id/credentials && az vm list | jq -r ".[] | select (.name==\"$instancename\")" | jq -r "keys[]"
                # /<id>/vm/list/<instance>/<parameter>
                "/[a-zA-Z0-9_-]+":
                  name: parameter
                  <<: *is_file
                  read_file:
                    sh: export AZURE_CONFIG_DIR=/accounts/$id/credentials && az vm list | jq -r ".[] | select (.name==\"$instancename\") .\"$parameter\""



profile: |
    echo --- start of profile loading ---
    load file2chan
    load std
    ndb/cs
    for host_var in `{ os env } { '{'$host_var'}' }
    
    dir = $EXPORT_PATH
    port = $NINEP_PUBLIC_PORT
    echo $NINEP_PUBLIC_HOST > /dev/sysname 
    test -d /mnt/registry || mkdir -p /mnt/registry
    mount -A tcp!registry!registry /mnt/registry
    AZURE_DIR = /tmp/azure/cmd
    test -d $AZURE_DIR || mkdir -p $AZURE_DIR
    load mpexpr
    fs_port = ${expr $NINEP_PUBLIC_PORT 1 +}
    file2chan $AZURE_DIR^/azure {} {
        load mpexpr
        var=${expr 10 rand}
        echo new id is $var
        echo hostname is `{os hostname}
        (app_id password tenant) = `{echo ${rget data}} 
        `{os /bin/bash -c 'mkdir -p /accounts/'^$var}
        `{os /bin/bash -c 'export AZURE_CONFIG_DIR=/accounts/'^$var^'/credentials && az login --service-principal -u '^$app_id^' -p '^$password^' --tenant '^$tenant^''}
        grid/reglisten -A -r description 'user id is '^$var tcp!*!^$fs_port { export $dir^/^$var & } &
        fs_port=${expr $fs_port 1 +}
    }
        
    grid/reglisten -A -r description ${quote $NINEP_DESCRIPTION} 'tcp!*!'^$port { export $AZURE_DIR & }
    test -n $status && os pkill -9 emu-g
    echo --- end of profile loading ---